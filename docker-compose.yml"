# ============================================================================
# ERNI Gruppe Building Agents - Docker Compose Configuration
# ============================================================================
# Production-like environment for local development and testing
# ============================================================================
#
# IMPORTANT: Environment variables are loaded from python-backend/.env
# Make sure to configure python-backend/.env before running docker-compose
# ============================================================================

version: '3.8'

services:
  # --------------------------------------------------------------------------
  # PostgreSQL Database
  # --------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: erni-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: erni_agents
      POSTGRES_USER: erni_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erni_user -d erni_agents"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erni-network

  # --------------------------------------------------------------------------
  # Redis Cache
  # --------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: erni-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erni-network

  # --------------------------------------------------------------------------
  # Backend API
  # --------------------------------------------------------------------------
  backend:
    build:
      context: ./python-backend
      dockerfile: Dockerfile
    container_name: erni-backend
    restart: unless-stopped
    env_file:
      - ./python-backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_VECTOR_STORE_ID: ${OPENAI_VECTOR_STORE_ID}

      # Application
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: DEBUG
      
      # Database
      DATABASE_URL: postgresql://erni_user:${DB_PASSWORD}@postgres:5432/erni_agents
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-please-change-this-secret-key-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-please-change-this-secret-key-in-production}
      ALLOWED_HOSTS: localhost,127.0.0.1,backend
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: 60
      RATE_LIMIT_PER_HOUR: 1000
      
      # Session
      SESSION_TIMEOUT_MINUTES: 30
    volumes:
      # Note: Code volume mount removed for production build
      # For development, uncomment this line:
      # - ./python-backend:/app
      - backend_logs:/var/log/erni-backend
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - erni-network

  # --------------------------------------------------------------------------
  # Frontend Application
  # --------------------------------------------------------------------------
  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://backend:8000
    container_name: erni-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_ENVIRONMENT: production
    # Note: Volume mounts removed for production build
    # For development, uncomment these lines:
    # volumes:
    #   - ./ui:/app
    #   - /app/node_modules
    #   - /app/.next
    ports:
      - "3000:3000"
    # Health check is defined in Dockerfile (uses Node.js HTTP check)
    networks:
      - erni-network

  # --------------------------------------------------------------------------
  # Nginx Reverse Proxy (Optional - for production-like setup)
  # --------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: erni-nginx
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - erni-network

# ----------------------------------------------------------------------------
# Volumes
# ----------------------------------------------------------------------------
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

# ----------------------------------------------------------------------------
# Networks
# ----------------------------------------------------------------------------
networks:
  erni-network:
    driver: bridge

# ============================================================================
# Usage Instructions
# ============================================================================
# 
# 1. Copy .env.example to .env and configure:
#    cp python-backend/.env.example python-backend/.env
#
# 2. Set required environment variables:
#    - OPENAI_API_KEY
#    - DB_PASSWORD
#    - REDIS_PASSWORD
#    - SECRET_KEY
#
# 3. Start all services:
#    docker-compose up -d
#
# 4. View logs:
#    docker-compose logs -f
#
# 5. Stop all services:
#    docker-compose down
#
# 6. Stop and remove volumes (WARNING: deletes all data):
#    docker-compose down -v
#
# 7. Rebuild after code changes:
#    docker-compose up -d --build
#
# 8. Access services:
#    - Frontend: http://localhost:3000
#    - Backend API: http://localhost:8000
#    - PostgreSQL: localhost:5432
#    - Redis: localhost:6379
#
# ============================================================================
