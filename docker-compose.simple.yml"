# ============================================================================
# ERNI Gruppe Building Agents - Simplified Docker Compose
# ============================================================================
# Simplified configuration for quick testing and development
# No database or Redis - just backend, frontend, and nginx
# ============================================================================

version: '3.8'

services:
  # --------------------------------------------------------------------------
  # Backend API
  # --------------------------------------------------------------------------
  backend:
    build:
      context: ./python-backend
      dockerfile: Dockerfile
    container_name: erni-backend
    restart: unless-stopped
    environment:
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Server
      HOST: 0.0.0.0
      PORT: 8000
      
      # Security
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000,http://localhost
      CORS_ALLOW_CREDENTIALS: true
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}
      RATE_LIMIT_PER_HOUR: ${RATE_LIMIT_PER_HOUR:-1000}
    volumes:
      - ./python-backend:/app
      - backend_logs:/var/log/erni-backend
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - erni-network

  # --------------------------------------------------------------------------
  # Frontend Application
  # --------------------------------------------------------------------------
  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://backend:8000
    container_name: erni-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - erni-network

  # --------------------------------------------------------------------------
  # Nginx Reverse Proxy
  # --------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: erni-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.simple.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - erni-network

# ----------------------------------------------------------------------------
# Volumes
# ----------------------------------------------------------------------------
volumes:
  backend_logs:
    driver: local

# ----------------------------------------------------------------------------
# Networks
# ----------------------------------------------------------------------------
networks:
  erni-network:
    driver: bridge

# ============================================================================
# Quick Start Instructions
# ============================================================================
# 
# 1. Make sure OPENAI_API_KEY is set in python-backend/.env
#
# 2. Build all containers:
#    docker-compose -f docker-compose.simple.yml build
#
# 3. Start all services:
#    docker-compose -f docker-compose.simple.yml up
#
# 4. Access the application:
#    - Frontend: http://localhost:3000
#    - Backend API: http://localhost:8000
#    - Nginx Proxy: http://localhost
#
# 5. View logs:
#    docker-compose -f docker-compose.simple.yml logs -f
#
# 6. Stop all services:
#    docker-compose -f docker-compose.simple.yml down
#
# 7. Rebuild after code changes:
#    docker-compose -f docker-compose.simple.yml up --build
#
# ============================================================================

