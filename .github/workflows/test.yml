name: Test Suite

on:
  push:
    branches: [ main, production, develop ]
  pull_request:
    branches: [ main, production ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.10.x, 3.11.x, 3.12.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python-backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./python-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=test-api-key" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV

    - name: Run linting with flake8
      working-directory: ./python-backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking with mypy (if available)
      working-directory: ./python-backend
      run: |
        pip install mypy || echo "mypy not available, skipping type checking"
        mypy . --ignore-missing-imports || echo "Type checking completed with warnings"
      continue-on-error: true

    - name: Run unit tests
      working-directory: ./python-backend
      run: |
        pytest tests/unit/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      working-directory: ./python-backend
      run: |
        pytest tests/integration/ -v --tb=short

    - name: Run all tests with coverage
      working-directory: ./python-backend
      run: |
        pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./python-backend/coverage.xml
        directory: ./python-backend/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          python-backend/htmlcov/
          python-backend/coverage.xml
          python-backend/.coverage

  test-frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      working-directory: ./ui
      run: npm ci

    - name: Run linting
      working-directory: ./ui
      run: npm run lint

    - name: Run type checking
      working-directory: ./ui
      run: npx tsc --noEmit

    - name: Run tests (if available)
      working-directory: ./ui
      run: |
        npm test --if-present || echo "No frontend tests configured yet"
      continue-on-error: true

    - name: Build application
      working-directory: ./ui
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-node-${{ matrix.node-version }}
        path: ui/.next/

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend]

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      working-directory: ./python-backend
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Run Safety check for dependencies
      working-directory: ./python-backend
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          python-backend/bandit-report.json
          python-backend/safety-report.json

  docker-build-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./python-backend
        push: false
        tags: erni-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ui
        push: false
        tags: erni-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose setup
      run: |
        echo "OPENAI_API_KEY=test-api-key" > python-backend/.env
        echo "DB_PASSWORD=test-password" >> python-backend/.env
        echo "REDIS_PASSWORD=test-password" >> python-backend/.env
        echo "SECRET_KEY=test-secret-key" >> python-backend/.env
        
        # Test that docker-compose configuration is valid
        docker-compose config

  notify-status:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, docker-build-test]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' }}
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: ${{ needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' }}
      run: |
        echo "❌ Tests failed!"
        exit 1
